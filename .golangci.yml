# SpecMint golangci-lint configuration
# Strict linting configuration for production-ready Go code

run:
  timeout: 5m
  tests: true
  issues-exit-code: 1
  build-tags: []
  skip-dirs:
    - vendor
    - bin
    - output
  skip-files: []
  modules-download-mode: readonly
  allow-parallel-runners: true

linters:
  enable:
    - errcheck
    - gosimple
    - govet
    - ineffassign
    - staticcheck
    - unused
    - gofmt
    - goimports
    - misspell
    - gocritic
    - revive

issues:
  exclude-use-default: false

output:
  formats:
    - format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  uniq-by-line: true
  sort-results: true

linters-settings:
  dupl:
    threshold: 100
  
  errcheck:
    check-type-assertions: true
    check-blank: true
    exclude-functions:
      - io/ioutil.ReadFile
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)
  
  exhaustive:
    check-generated: false
    default-signifies-exhaustive: false
  
  funlen:
    lines: 100
    statements: 50
  
  gci:
    local-prefixes: github.com/specmint/specmint
  
  goconst:
    min-len: 2
    min-occurrences: 3
  
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
  
  gocyclo:
    min-complexity: 15
  
  godot:
    scope: declarations
    exclude:
      - "^fixme:"
      - "^todo:"
    period: true
    capital: false
  
  gofmt:
    simplify: true
  
  goimports:
    local-prefixes: github.com/specmint/specmint
  
  golint:
    min-confidence: 0
  
  gomnd:
    settings:
      mnd:
        checks: argument,case,condition,operation,return,assign
        ignored-numbers: 0,1,2,3
        ignored-functions: strings.SplitN
  
  gomodguard:
    allowed:
      modules: []
      domains: []
    blocked:
      modules: []
      versions: []
      local_replace_directives: false
  
  govet:
    check-shadowing: true
    settings:
      printf:
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
    enable:
      - atomicalign
      - deepequalerrors
      - fieldalignment
      - findcall
      - nilness
      - reflectvaluecompare
      - shadow
      - sortslice
      - timeformat
      - unusedwrite
    disable:
      - loopclosure
  
  importas:
    no-unaliased: true
    alias:
      - pkg: github.com/rs/zerolog/log
        alias: log
  
  lll:
    line-length: 120
  
  maligned:
    suggest-new: true
  
  misspell:
    locale: US
    ignore-words:
      - specmint
  
  nakedret:
    max-func-lines: 30
  
  nestif:
    min-complexity: 4
  
  nolintlint:
    allow-leading-space: true
    allow-unused: false
    require-explanation: false
    require-specific: false
  
  prealloc:
    simple: true
    range-loops: true
    for-loops: false
  
  predeclared:
    ignore: ""
    q: false
  
  revive:
    min-confidence: 0
    rules:
      - name: atomic
      - name: line-length-limit
        arguments: [120]
      - name: argument-limit
        arguments: [8]
      - name: cyclomatic
        arguments: [15]
      - name: max-public-structs
        arguments: [10]
      - name: file-header
        disabled: true
  
  rowserrcheck:
    packages:
      - github.com/jmoiron/sqlx
  
  staticcheck:
    go: "1.21"
    checks: ["all"]
  
  stylecheck:
    go: "1.21"
    checks: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]
    dot-import-whitelist:
      - fmt
    initialisms: ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS", "SIP", "RTP", "AMQP", "DB", "TS"]
    http-status-code-whitelist: ["200", "400", "404", "500"]
  
  tagliatelle:
    case:
      use-field-name: true
      rules:
        json: camel
        yaml: camel
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab
  
  testpackage:
    skip-regexp: (export|internal)_test\.go
  
  thelper:
    test:
      first: true
      name: true
      begin: true
    benchmark:
      first: true
      name: true
      begin: true
  
  unparam:
    check-exported: false
  
  unused:
    go: "1.21"
  
  whitespace:
    multi-if: false
    multi-func: false
  
  wrapcheck:
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(
      - .WithMessage(
      - .WithMessagef(
      - .WithStack(
    ignoreSigRegexps:
      - \.New.*Error\(
    ignorePackageGlobs:
      - encoding/*
      - github.com/pkg/*
  
  wsl:
    strict-append: true
    allow-assign-and-call: true
    allow-multiline-assign: true
    allow-cuddle-declarations: false
    allow-trailing-comment: false
    force-case-trailing-whitespace: 0
    force-err-cuddling: false
    allow-separated-leading-comment: false

linters:
  disable-all: true
  enable:
    - asciicheck
    - bodyclose
    - cyclop
    - dupl
    - durationcheck
    - errcheck
    - errorlint
    - exhaustive
    - exportloopref
    - forbidigo
    - forcetypeassert
    - funlen
    - gci
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    - godox
    - goerr113
    - gofmt
    - gofumpt
    - goheader
    - goimports
    - golint
    - gomnd
    - gomodguard
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - importas
    - ineffassign
    - lll
    - makezero
    - misspell
    - nakedret
    - nestif
    - nilerr
    - nilnil
    - nlreturn
    - noctx
    - nolintlint
    - paralleltest
    - prealloc
    - predeclared
    - promlinter
    - revive
    - rowserrcheck
    - sqlclosecheck
    - staticcheck
    - stylecheck
    - tagliatelle
    - tenv
    - testpackage
    - thelper
    - tparallel
    - typecheck
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - varcheck
    - wastedassign
    - whitespace
    - wrapcheck
    - wsl

issues:
  exclude-rules:
    - path: _test\.go
      linters:
        - gomnd
        - goconst
        - funlen
        - gocyclo
        - gocognit
        - dupl
        - lll
        - paralleltest
    
    - path: cmd/
      linters:
        - gochecknoglobals
        - gochecknoinits
    
    - path: internal/
      linters:
        - gochecknoglobals
    
    - linters:
        - lll
      source: "^//go:generate "
    
    - linters:
        - gocritic
      text: "unnecessaryDefer:"
  
  exclude-use-default: false
  exclude:
    # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print.*|os\.(Un)?Setenv). is not checked
    
    # govet: Common false positives
    - (possible misuse of unsafe.Pointer|should have signature)
    
    # staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
    - ineffective break statement. Did you mean to break out of the outer loop
    
    # gosec: Too many false-positives on 'unsafe' usage
    - G103
    
    # gosec: Too many false-positives for parametrized shell calls
    - G204
    
    # gosec: Duplicated errcheck checks
    - G104
  
  max-issues-per-linter: 50
  max-same-issues: 3
  new: false
  new-from-rev: ""
  new-from-patch: ""
  whole-files: false
  fix: false

severity:
  default-severity: error
  case-sensitive: false
  rules:
    - linters:
        - dupl
      severity: info
    - linters:
        - gocritic
      severity: info
    - linters:
        - godot
      severity: info
