name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.25.0'

jobs:
  # ============================================================================
  # PRE-RELEASE VALIDATION
  # ============================================================================
  validate:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Full Test Suite
        env:
          SKIP_OLLAMA_TESTS: "true"
        run: |
          go test -v -race ./...
          
      - name: Run Security Audit
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install golang.org/x/vuln/cmd/govulncheck@latest
          gosec ./...
          govulncheck ./...

      - name: Validate Golden Datasets
        run: |
          go build -o bin/specmint ./cmd/specmint
          chmod +x test/golden-test-suite.sh
          ./test/golden-test-suite.sh

  # ============================================================================
  # MULTI-PLATFORM BUILD
  # ============================================================================
  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            name: linux-amd64
          - goos: linux
            goarch: arm64
            name: linux-arm64
          - goos: darwin
            goarch: amd64
            name: darwin-amd64
          - goos: darwin
            goarch: arm64
            name: darwin-arm64
          - goos: windows
            goarch: amd64
            name: windows-amd64
            ext: .exe
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build Binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          BINARY_NAME="specmint-${{ matrix.name }}${{ matrix.ext }}"
          go build -ldflags="-s -w -X main.version=${{ github.ref_name }}" -o "dist/${BINARY_NAME}" ./cmd/specmint
          
          # Generate checksum
          cd dist
          sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: dist/

  # ============================================================================
  # CREATE GITHUB RELEASE
  # ============================================================================
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: dist/

      - name: Generate Release Notes
        run: |
          echo "# SpecMint ${{ github.ref_name }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## 🚀 What's New" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Extract changes from recent commits
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_NOTES.md 2>/dev/null || echo "- Initial release" >> RELEASE_NOTES.md
          
          echo "" >> RELEASE_NOTES.md
          echo "## 📦 Installation" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "Download the appropriate binary for your platform from the assets below." >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Linux/macOS" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "# Download and install (replace with your platform)" >> RELEASE_NOTES.md
          echo "curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/specmint-linux-amd64 -o specmint" >> RELEASE_NOTES.md
          echo "chmod +x specmint" >> RELEASE_NOTES.md
          echo "sudo mv specmint /usr/local/bin/" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Windows" >> RELEASE_NOTES.md
          echo "Download `specmint-windows-amd64.exe` and add to your PATH." >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## 🔐 Verification" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "All binaries include SHA256 checksums for verification:" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "sha256sum -c specmint-linux-amd64.sha256" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## 🛡️ Security" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "- ✅ Built with Go ${{ env.GO_VERSION }}" >> RELEASE_NOTES.md
          echo "- ✅ Zero known vulnerabilities" >> RELEASE_NOTES.md
          echo "- ✅ Static security analysis passed" >> RELEASE_NOTES.md
          echo "- ✅ All tests passing" >> RELEASE_NOTES.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: RELEASE_NOTES.md
          files: dist/*
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # POST-RELEASE VALIDATION
  # ============================================================================
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Download and Test Binary
        run: |
          # Download Linux binary
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/specmint-linux-amd64 -o specmint
          chmod +x specmint
          
          # Basic functionality test
          ./specmint --version
          ./specmint --help
          
          echo "✅ Release binary validated successfully"

      - name: Notify Success
        run: |
          echo "🎉 SpecMint ${{ github.ref_name }} released successfully!"
          echo "📦 Binaries available at: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
